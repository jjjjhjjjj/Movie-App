{"version":3,"sources":["components/commons/GridCards.jsx","components/config.js","components/LandingPage/Section/MainImage.jsx","components/LandingPage/LandingPage.jsx","components/MovieDetail/sections/MovieInfo.jsx","components/MovieDetail/MovieDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["GridCards","movieId","image","movieName","landingPage","characterName","lg","md","xs","style","position","href","src","alt","width","height","API_URL","IMAGE_BASE_URL","API_KEY","MainImage","title","text","background","backgroundSize","backgroundPosition","maxWidth","bottom","marginLeft","color","fontSize","LandingPage","useState","movies","setMovies","mainMovieImg","setMainMovieImg","currentPage","setCurrentPage","useEffect","endpoint","fetchMovies","useCallback","fetch","then","response","json","results","page","loadMoreItems","margin","backdrop_path","original_title","overview","gutter","map","movie","index","Fragment","key","poster_path","id","display","justifyContent","type","onClick","MovieInfo","bordered","Item","label","release_date","revenue","runtime","column","vote_average","vote_count","status","popularity","MovieDetail","props","match","params","setMovie","casts","setCasts","actorToggle","setActorToggle","endpointCrew","endpointInfo","console","log","cast","profile_path","name","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","basename","ProcessingInstruction","env","PUBLIC_URL","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kPA6BeA,EA1BG,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,QAASC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cAC5D,OAAID,EAEF,kBAAC,IAAD,CAAKE,GAAI,EAAGC,GAAI,EAAGC,GAAI,IACtB,yBAAKC,MAAO,CAAEC,SAAU,aACvB,uBAAGC,KAAI,iBAAYV,IAClB,yBAAKW,IAAKV,EAAOW,IAAKV,EAAWM,MAAO,CAAEK,MAAO,OAAQC,OAAQ,cAOpE,kBAAC,IAAD,CAAKT,GAAI,EAAGC,GAAI,EAAGC,GAAI,IACtB,yBAAKC,MAAO,CAAEC,SAAU,aACvB,yBACCE,IAAe,OAAVV,EAAiB,gDAAkDA,EACxEW,IAAKR,EACLI,MAAO,CAAEK,MAAO,OAAQC,OAAQ,cCrBzBC,EAAU,gCACVC,EAAiB,8BACjBC,EAAU,mCCiCRC,EAjCG,SAAC,GAA4B,IAA1BjB,EAAyB,EAAzBA,MAAOkB,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClC,OACC,yBACCZ,MAAO,CACNa,WAAW,4HAAD,OAGCpB,EAHD,eAIVa,OAAQ,QACRQ,eAAgB,cAChBC,mBAAoB,iBACpBV,MAAO,OACPJ,SAAU,aAGX,6BACC,yBACCD,MAAO,CACNC,SAAU,WACVe,SAAU,QACVC,OAAQ,OACRC,WAAY,OACZC,MAAO,UAGR,gCAAMR,EAAN,KACA,uBAAGX,MAAO,CAAEmB,MAAO,QAASC,SAAU,SAAWR,O,QCmDvCS,G,MAvEK,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAClBC,EADkB,KACVC,EADU,OAEeF,qBAFf,mBAElBG,EAFkB,KAEJC,EAFI,OAGaJ,qBAHb,mBAGlBK,EAHkB,KAGLC,EAHK,KAKzBC,qBAAU,WACT,IAAMC,EAAQ,UAAMvB,EAAN,iCAAsCE,EAAtC,0BACdsB,EAAYD,KACV,IAEH,IAAMC,EAAcC,uBACnB,SAAAF,GACCG,MAAMH,GACJI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACLX,EAAU,GAAD,mBAAKD,GAAL,YAAgBY,EAASE,WAClCT,EAAeO,EAASG,MACF,IAAlBH,EAASG,MACZZ,EAAgBS,EAASE,QAAQ,SAIrC,CAACd,IAGIgB,EAAgBP,uBAAY,WACjC,IAAMF,EAAQ,UAAMvB,EAAN,iCAAsCE,EAAtC,gCACbkB,EAAc,GAEfI,EAAYD,KACV,CAACH,IAEJ,OACC,yBAAK3B,MAAO,CAAEK,MAAO,OAAQmC,OAAQ,MAEnCf,GACA,kBAAC,EAAD,CACChC,MAAK,UAAKe,EAAL,mBAA8BiB,EAAagB,eAChD9B,MAAOc,EAAaiB,eACpB9B,KAAMa,EAAakB,WAIrB,yBAAK3C,MAAO,CAAEK,MAAO,MAAOmC,OAAQ,cACnC,+CACA,6BAEA,kBAAC,IAAD,CAAKI,OAAQ,CAAC,GAAI,KAChBrB,GACAA,EAAOsB,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACpB,kBAAC,EAAD,CACCpD,aAAW,EACXF,MAAOqD,EAAMI,aAAN,UAAwB1C,EAAxB,eAA6CsC,EAAMI,aAC1D1D,QAASsD,EAAMK,GACfzD,UAAWoD,EAAMJ,uBAOvB,yBAAK1C,MAAO,CAAEoD,QAAS,OAAQC,eAAgB,WAC9C,4BAAQC,KAAK,SAASC,QAAShB,GAA/B,iB,QClDWiB,EAjBG,SAAC,GAAe,IAAbV,EAAY,EAAZA,MACpB,OACC,kBAAC,IAAD,CAAcnC,MAAM,aAAa8C,UAAQ,GACxC,kBAAC,IAAaC,KAAd,CAAmBC,MAAM,SAASb,EAAMJ,gBACxC,kBAAC,IAAagB,KAAd,CAAmBC,MAAM,gBAAgBb,EAAMc,cAC/C,kBAAC,IAAaF,KAAd,CAAmBC,MAAM,WAAWb,EAAMe,SAC1C,kBAAC,IAAaH,KAAd,CAAmBC,MAAM,WAAWb,EAAMgB,SAC1C,kBAAC,IAAaJ,KAAd,CAAmBC,MAAM,eAAeI,OAAQ,GAC9CjB,EAAMkB,cAER,kBAAC,IAAaN,KAAd,CAAmBC,MAAM,cAAcb,EAAMmB,YAC7C,kBAAC,IAAaP,KAAd,CAAmBC,MAAM,UAAUb,EAAMoB,QACzC,kBAAC,IAAaR,KAAd,CAAmBC,MAAM,cAAcb,EAAMqB,cC4DjCC,EApEK,SAAAC,GACnB,IAAI7E,EAAU6E,EAAMC,MAAMC,OAAO/E,QADL,EAEF8B,qBAFE,mBAErBwB,EAFqB,KAEd0B,EAFc,OAGFlD,qBAHE,mBAGrBmD,EAHqB,KAGdC,EAHc,OAIUpD,oBAAS,GAJnB,mBAIrBqD,EAJqB,KAIRC,EAJQ,KAM5B/C,qBAAU,WACT,IAAMgD,EAAY,UAAMtE,EAAN,iBAAsBf,EAAtB,4BAAiDiB,GAC7DqE,EAAY,UAAMvE,EAAN,iBAAsBf,EAAtB,oBAAyCiB,GAC3DwB,MAAM6C,GACJ5C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACLqC,EAASrC,MAGXF,MAAM4C,GACJ3C,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACL4C,QAAQC,IAAI7C,EAAS8C,MACrBP,EAASvC,EAAS8C,WAElB,IAMH,OACC,6BAEEnC,GACA,kBAAC,EAAD,CACCrD,MAAK,UAAKe,EAAL,mBAA8BsC,EAAML,eACzC9B,MAAOmC,EAAMJ,eACb9B,KAAMkC,EAAMH,WAId,yBAAK3C,MAAO,CAAEK,MAAO,MAAOmC,OAAQ,cAElCM,GAAS,kBAAC,EAAD,CAAWA,MAAOA,IAC5B,6BAEA,yBAAK9C,MAAO,CAAEoD,QAAS,OAAQC,eAAgB,SAAUb,OAAQ,SAChE,4BAAQc,KAAK,SAASC,QArBF,WACvBqB,GAAgBD,KAoBb,sBAMAA,GACA,kBAAC,IAAD,CAAK/B,OAAQ,CAAC,GAAI,KAChB6B,GACAA,EAAM5B,KAAI,SAACoC,EAAMlC,GAAP,OACT,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACpB,kBAAC,EAAD,CACCtD,MAAOwF,EAAKC,cAAL,UAAwB1E,EAAxB,eAA6CyE,EAAKC,cACzDtF,cAAeqF,EAAKE,e,OCjDfC,MAXf,WACC,OACC,oCACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWlE,IACjC,kBAAC,IAAD,CAAOgE,KAAK,kBAAkBE,UAAWnB,OCEzBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,2D,YCXNsB,IAASC,OACR,kBAAC,IAAD,CAAeC,SAAUC,sBAAsBC,IAAIC,YAClD,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpE,MAAK,SAAAqE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.600ea6c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Col } from 'antd';\r\n\r\nconst GridCards = ({ movieId, image, movieName, landingPage, characterName }) => {\r\n\tif (landingPage) {\r\n\t\treturn (\r\n\t\t\t<Col lg={6} md={8} xs={24}>\r\n\t\t\t\t<div style={{ position: 'relative' }}>\r\n\t\t\t\t\t<a href={`/movie/${movieId}`}>\r\n\t\t\t\t\t\t<img src={image} alt={movieName} style={{ width: '100%', height: '320px' }} />\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t</Col>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<Col lg={6} md={8} xs={24}>\r\n\t\t\t\t<div style={{ position: 'relative' }}>\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tsrc={image === null ? 'https://via.placeholder.com/320?text=No+Image' : image}\r\n\t\t\t\t\t\talt={characterName}\r\n\t\t\t\t\t\tstyle={{ width: '100%', height: '320px' }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</Col>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default GridCards;\r\n","export const API_URL = 'https://api.themoviedb.org/3/';\r\nexport const IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/';\r\nexport const API_KEY = '96abf0f0c3cf0198a3e16c6fc6402000';\r\n","import React from 'react';\r\n\r\nconst MainImage = ({ image, title, text }) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tbackground: `linear-gradient(to bottom, rgba(0,0,0,0) 39%,\r\n        rgba(0,0,0,0) 41%,\r\n        rgba(0,0,0,0.65) 100%),\r\n        url('${image}'), #1c1c1c`,\r\n\t\t\t\theight: '500px',\r\n\t\t\t\tbackgroundSize: '100%, cover',\r\n\t\t\t\tbackgroundPosition: 'center, center',\r\n\t\t\t\twidth: '100%',\r\n\t\t\t\tposition: 'relative',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tposition: 'absolute',\r\n\t\t\t\t\t\tmaxWidth: '500px',\r\n\t\t\t\t\t\tbottom: '2rem',\r\n\t\t\t\t\t\tmarginLeft: '2rem',\r\n\t\t\t\t\t\tcolor: 'white',\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<h2> {title} </h2>\r\n\t\t\t\t\t<p style={{ color: 'white', fontSize: '1rem' }}>{text}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MainImage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport GridCards from '../commons/GridCards';\r\nimport { API_KEY, API_URL, IMAGE_BASE_URL } from '../config';\r\nimport MainImage from './Section/MainImage';\r\nimport { Row } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { useCallback } from 'react';\r\n\r\nconst LandingPage = () => {\r\n\tconst [movies, setMovies] = useState([]);\r\n\tconst [mainMovieImg, setMainMovieImg] = useState();\r\n\tconst [currentPage, setCurrentPage] = useState();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\r\n\t\tfetchMovies(endpoint);\r\n\t}, []);\r\n\r\n\tconst fetchMovies = useCallback(\r\n\t\tendpoint => {\r\n\t\t\tfetch(endpoint)\r\n\t\t\t\t.then(response => response.json())\r\n\t\t\t\t.then(response => {\r\n\t\t\t\t\tsetMovies([...movies, ...response.results]);\r\n\t\t\t\t\tsetCurrentPage(response.page);\r\n\t\t\t\t\tif (response.page === 1) {\r\n\t\t\t\t\t\tsetMainMovieImg(response.results[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t},\r\n\t\t[movies],\r\n\t);\r\n\r\n\tconst loadMoreItems = useCallback(() => {\r\n\t\tconst endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=${\r\n\t\t\tcurrentPage + 1\r\n\t\t}`;\r\n\t\tfetchMovies(endpoint);\r\n\t}, [currentPage]);\r\n\r\n\treturn (\r\n\t\t<div style={{ width: '100%', margin: '0' }}>\r\n\t\t\t{/* Main Image */}\r\n\t\t\t{mainMovieImg && (\r\n\t\t\t\t<MainImage\r\n\t\t\t\t\timage={`${IMAGE_BASE_URL}original${mainMovieImg.backdrop_path}`}\r\n\t\t\t\t\ttitle={mainMovieImg.original_title}\r\n\t\t\t\t\ttext={mainMovieImg.overview}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\r\n\t\t\t<div style={{ width: '85%', margin: '1rem auto' }}>\r\n\t\t\t\t<h2>Movie by latest</h2>\r\n\t\t\t\t<hr />\r\n\t\t\t\t{/* Movie Grid cards */}\r\n\t\t\t\t<Row gutter={[16, 16]}>\r\n\t\t\t\t\t{movies &&\r\n\t\t\t\t\t\tmovies.map((movie, index) => (\r\n\t\t\t\t\t\t\t<React.Fragment key={index}>\r\n\t\t\t\t\t\t\t\t<GridCards\r\n\t\t\t\t\t\t\t\t\tlandingPage\r\n\t\t\t\t\t\t\t\t\timage={movie.poster_path && `${IMAGE_BASE_URL}w500${movie.poster_path}`}\r\n\t\t\t\t\t\t\t\t\tmovieId={movie.id}\r\n\t\t\t\t\t\t\t\t\tmovieName={movie.original_title}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t</Row>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div style={{ display: 'flex', justifyContent: 'center' }}>\r\n\t\t\t\t<button type=\"button\" onClick={loadMoreItems}>\r\n\t\t\t\t\tLoad More\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\r\nimport { Descriptions } from 'antd';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst MovieInfo = ({ movie }) => {\r\n\treturn (\r\n\t\t<Descriptions title=\"Movie Info\" bordered>\r\n\t\t\t<Descriptions.Item label=\"Title\">{movie.original_title}</Descriptions.Item>\r\n\t\t\t<Descriptions.Item label=\"release_date\">{movie.release_date}</Descriptions.Item>\r\n\t\t\t<Descriptions.Item label=\"revenue\">{movie.revenue}</Descriptions.Item>\r\n\t\t\t<Descriptions.Item label=\"runtime\">{movie.runtime}</Descriptions.Item>\r\n\t\t\t<Descriptions.Item label=\"vote_average\" column={2}>\r\n\t\t\t\t{movie.vote_average}\r\n\t\t\t</Descriptions.Item>\r\n\t\t\t<Descriptions.Item label=\"vote_count\">{movie.vote_count}</Descriptions.Item>\r\n\t\t\t<Descriptions.Item label=\"status\">{movie.status}</Descriptions.Item>\r\n\t\t\t<Descriptions.Item label=\"popularity\">{movie.popularity}</Descriptions.Item>\r\n\t\t</Descriptions>\r\n\t);\r\n};\r\n\r\nexport default MovieInfo;\r\n","import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport GridCards from '../commons/GridCards';\r\nimport { API_URL, API_KEY, IMAGE_BASE_URL } from '../config';\r\nimport MainImage from '../LandingPage/Section/MainImage';\r\nimport MovieInfo from './sections/MovieInfo';\r\nimport { Row } from 'antd';\r\n\r\nconst MovieDetail = props => {\r\n\tlet movieId = props.match.params.movieId;\r\n\tconst [movie, setMovie] = useState();\r\n\tconst [casts, setCasts] = useState();\r\n\tconst [actorToggle, setActorToggle] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst endpointCrew = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n\t\tconst endpointInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n\t\tfetch(endpointInfo)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tsetMovie(response);\r\n\t\t\t});\r\n\r\n\t\tfetch(endpointCrew)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(response => {\r\n\t\t\t\tconsole.log(response.cast);\r\n\t\t\t\tsetCasts(response.cast);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tconst toggleActorView = () => {\r\n\t\tsetActorToggle(!actorToggle);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{/* Header */}\r\n\t\t\t{movie && (\r\n\t\t\t\t<MainImage\r\n\t\t\t\t\timage={`${IMAGE_BASE_URL}original${movie.backdrop_path}`}\r\n\t\t\t\t\ttitle={movie.original_title}\r\n\t\t\t\t\ttext={movie.overview}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t\t{/* Body   */}\r\n\t\t\t<div style={{ width: '85%', margin: '1rem auto' }}>\r\n\t\t\t\t{/* Movie Info */}\r\n\t\t\t\t{movie && <MovieInfo movie={movie} />}\r\n\t\t\t\t<br />\r\n\r\n\t\t\t\t<div style={{ display: 'flex', justifyContent: 'center', margin: '2rem' }}>\r\n\t\t\t\t\t<button type=\"button\" onClick={toggleActorView}>\r\n\t\t\t\t\t\tToggle Actor View\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Actors Grid  */}\r\n\t\t\t\t{actorToggle && (\r\n\t\t\t\t\t<Row gutter={[16, 16]}>\r\n\t\t\t\t\t\t{casts &&\r\n\t\t\t\t\t\t\tcasts.map((cast, index) => (\r\n\t\t\t\t\t\t\t\t<React.Fragment key={index}>\r\n\t\t\t\t\t\t\t\t\t<GridCards\r\n\t\t\t\t\t\t\t\t\t\timage={cast.profile_path && `${IMAGE_BASE_URL}w500${cast.profile_path}`}\r\n\t\t\t\t\t\t\t\t\t\tcharacterName={cast.name}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MovieDetail;\r\n","import React from 'react';\nimport LandingPage from './components/LandingPage/LandingPage';\nimport MovieDetail from './components/MovieDetail/MovieDetail';\nimport { Switch, Route } from 'react-router-dom';\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/\" exact component={LandingPage} />\n\t\t\t\t<Route path=\"/movie/:movieId\" component={MovieDetail} />\n\t\t\t</Switch>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<BrowserRouter basename={ProcessingInstruction.env.PUBLIC_URL}>\n\t\t<App />\n\t</BrowserRouter>,\n\tdocument.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}